name: OpenLiberty CI

on:
  pull_request:
    branches: 
    - integration
    - gh-actions
    types: [opened, synchronize, reopened, ready_for_review]
    paths-ignore:
      - '.gitignore'
      - '.dockerignore'
      - '*.md'
      - '*.adoc'
      - '*.txt'
      - '.github/ISSUE_TEMPLATE/**'
      - '.dependabot/**'
      - 'cla/**'
      - 'images/**'
      - 'logos/**'
env:
  LANG: en_US.UTF-8
jobs:
  setup: #Validates copyright headers, selects test-os, selects java version, and sets up test categories. 
    name: Setup 
    runs-on: ubuntu-latest
    outputs: 
      test-matrix: ${{ steps.gen-params.outputs.test-matrix }}
      test-os: ${{ steps.gen-params.outputs.test-os }}
      test-java: ${{ steps.gen-params.outputs.test-java }}
    steps: 
    - uses: actions/checkout@v2
      with:
        fetch-depth: 50
    - name: Validate copyright headers
      if: "github.event_name == 'pull_request'"
      run: .github/workflow-scripts/validate-copyright-headers.sh
    - name: Set up Java
      uses: joschi/setup-jdk@v2
      with:
        java-version: 11
        openjdk_impl: openj9
    - name: Generate output
      id: gen-params
      env:
        PR-BODY: ${{ github.event.pull_request.body }}
      run: .github/workflow-scripts/generate-params.sh
  build: #Main build always done on linix run in parallel to setup and unit-test
    name: Build Open Liberty
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 50
    - name: Set up Java
      uses: joschi/setup-jdk@v2
      with:
        java-version: 11
        openjdk_impl: openj9
    - name: Apply Gradle cache
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches/modules-2
          !~/.gradle/caches/modules-2/io.openliberty*
          !~/.gradle/caches/modules-2/com.ibm.w*
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    - name: Apply Maven cache
      uses: actions/cache@v2
      with:
        path: |
          ~/.m2/repository/
          !~/.m2/repository/io/openliberty
          !~/.m2/repository/com/ibm/w*
        key: ${{ runner.os }}-maven-${{ hashFiles('**/*.maven') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Build with Gradle
      run: |
        cd dev
        chmod +x gradlew
        echo "Building Liberty.  This will take approx. 30 minutes"
        mkdir gradle && touch build.gradle.log
        ./gradlew cnf:initialize assemble > gradle/build.gradle.log
        cd .. && zip -rq openliberty-image.zip dev/build.image/wlp/
    - name: Upload build failure
      if: failure()
      uses: actions/upload-artifact@v2
      with:
        name: Build failure
        path: dev/gradle/build.gradle.log
    - name: Upload liberty image
      uses: actions/upload-artifact@v2
      with:
        name: openliberty-image
        if-no-files-found: error
        path: openliberty-image.zip
  unit_tests: #Unit tests always run linux, but could depends on setup to determine jdk
    name: Unit Tests
    needs: setup
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
    - uses: actions/checkout@v2 
    - name: Set up Java
      uses: joschi/setup-jdk@v2
      with:
        java-version: ${{ needs.setup.outputs.test-java }}
        openjdk_impl: openj9
    - name: Apply Gradle cache
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches/modules-2
          !~/.gradle/caches/modules-2/io.openliberty*
          !~/.gradle/caches/modules-2/com.ibm.w*
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    - name: Apply Maven cache
      uses: actions/cache@v2
      with:
        path: |
          ~/.m2/repository/
          !~/.m2/repository/io/openliberty
          !~/.m2/repository/com/ibm/w*
        key: ${{ runner.os }}-maven-${{ hashFiles('**/*.maven') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Run unit tests # This script will NOT fail if test(s) fail
      id: run-unit-tests
      run: .github/workflow-scripts/run-unit-tests.sh
    - name: Upload run failure # If script did fail, likely a build issue, archive gradle log
      if: failure()
      uses: actions/upload-artifact@v2
      with:
        name: Unit gradle failure
        path: dev/gradle/unit.gradle.log
    - name: Upload test report # If there was a test failure, archive test report
      if: success() && steps.run-unit-tests.outputs.status == 'failure'
      uses: actions/upload-artifact@v2
      with:
        name: Unit test logs
        path: dev/cnf/generated/testReports/allUnitTests
    - name: Collect unit test results # Regardless of test status, collect test results [total, success, failure]
      if: success()
      shell: bash
      run: .github/workflow-scripts/collect-unit-tests.sh
    - name: Publish unit test report # Publish those results
      if: success()
      uses: mikepenz/action-junit-report@v1
      with:
        report_paths: './unit-results/TEST-*.xml'
        check_name: Unit Test Report
        github_token: ${{ secrets.GITHUB_TOKEN }}
  fat_tests: #Runs parallel jobs for each FAT category. JDK version and OS are dependent on setup
    name: FAT Tests - ${{matrix.category}}
    needs: [setup, build]
    runs-on: ${{ needs.setup.outputs.test-os }}
    strategy:
      fail-fast: false
      max-parallel: 19
      matrix: ${{fromJson(needs.setup.outputs.test-matrix)}}
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 50
    - name: Reclaim disk space
      run: .github/workflow-scripts/reclaim-disk-space.sh
    - name: Set up Java
      uses: joschi/setup-jdk@v2
      with:
        java-version: ${{ needs.setup.outputs.test-java }}
        openjdk_impl: openj9
    - name: Apply Gradle cache
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches/modules-2
          !~/.gradle/caches/modules-2/io.openliberty*
          !~/.gradle/caches/modules-2/com.ibm.w*
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    - name: Apply Maven cache
      uses: actions/cache@v2
      with:
        path: |
          ~/.m2/repository/
          !~/.m2/repository/io/openliberty
          !~/.m2/repository/com/ibm/w*
        key: ${{ runner.os }}-maven-${{ hashFiles('**/*.maven') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Download liberty image
      uses: actions/download-artifact@v2
      with:
        name: openliberty-image
    - name: Run FAT buckets #This script will NOT fail if test(s) fail.
      timeout-minutes: 150
      shell: bash
      env:
        CATEGORY: ${{matrix.category}}
        GH_EVENT_NAME: ${{github.event_name}}
      run: .github/workflow-scripts/run-fat-build.sh
    - name: Upload run failure #If the script did fail, it was likely a build issue, dump gradle logs.
      if: failure()
      uses: actions/upload-artifact@v2
      with:
        name: FAT gradle failure
        path: gradle/fats/*.gradle.log
    - name: Check for FAT failures #Determine if there were test failures
      id: check-fat-failure
      shell: bash
      env:
        CATEGORY: ${{matrix.category}}
      run: .github/workflow-scripts/check-fat-failures.sh
    - name: Upload failing FAT artifacts #If test(s) failed upload the server/output directories
      if: steps.check-fat-failure.outputs.status == 'failure'
      uses: aguibert/upload-artifact@v1.0
      with:
        name: ${{matrix.category}}
        path: dev/failing_buckets/*.zip
        single-archive: "false"
    - name: Publish FAT report #If test(s) failed publish failures for quick dev access
      uses: mikepenz/action-junit-report@v1
      if: steps.check-fat-failure.outputs.status == 'failure'
      with:
        report_paths: './fat-results/TEST-*.xml'
        check_name: ${{matrix.category}} FAT Report
        github_token: ${{ secrets.GITHUB_TOKEN }}
      
